{"version":3,"sources":["components/InputPeople.module.css","components/TipButton.module.css","components/InputBill.module.css","components/InputTip.module.css","assets/logo.svg","components/InputPeople.tsx","components/InputBill.tsx","components/TipButton.tsx","components/InputTip.tsx","App.tsx","index.tsx"],"names":["module","exports","InputPeople","state","setState","maxValue","inputClass","cx","styles","type","className","onChange","e","character","nativeEvent","data","test","currentValue","parseInt","toString","onKeyDown","key","newValue","slice","length","value","InputBill","rest","toFixed","parseFloat","TipButton","text","btnClass","custom","onClick","InputTip","placeholder","tipAmount","bill","tip","people","totalPerPerson","tips","App","useState","setBill","setPeople","setTip","handlerSetTip","classPeopleInputError","src","Logo","alt","title","map","t","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ac474e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputPeople_input__1AB9P\",\"input_outline_orange\":\"InputPeople_input_outline_orange__1BMIw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"TipButton_button__1HIj1\",\"button_active\":\"TipButton_button_active__2GrXs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputBill_input__3yqXR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"InputTip_input__3et4D\"};","export default __webpack_public_path__ + \"static/media/logo.3cc0528b.svg\";","import React from \"react\";\r\nimport { InputPropsType } from \"../types/Types\";\r\n//@ts-ignore\r\nimport styles from \"./InputPeople.module.css\";\r\nimport cx from \"classnames\";\r\n\r\nexport default function InputPeople({\r\n  state,\r\n  setState,\r\n  maxValue\r\n}: InputPropsType) {\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const character = (e.nativeEvent as InputEvent).data;\r\n\r\n    if (character && /\\d/.test(character)) {\r\n      const currentValue = parseInt(state.toString() + character, 10);\r\n\r\n      // limit\r\n      if (currentValue <= maxValue) setState(currentValue);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Backspace\") {\r\n      if (state > 0) {\r\n        const newValue = state.toString();\r\n        setState(parseInt(newValue.slice(0, newValue.length - 1) || \"0\", 10));\r\n      }\r\n    }\r\n  };\r\n\r\n  const inputClass = cx({\r\n    [styles[\"input\"]]: true,\r\n    [styles[\"input_outline_orange\"]]: state === 0\r\n  });\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      className={inputClass}\r\n      onChange={handleChange}\r\n      onKeyDown={handleKeyDown}\r\n      aria-label=\"People\"\r\n      value={state}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { InputPropsType } from \"../types/Types\";\r\n//@ts-ignore\r\nimport styles from \"./InputBill.module.css\";\r\n\r\nexport default function InputBill({\r\n  state,\r\n  setState,\r\n  maxValue,\r\n  ...rest\r\n}: InputPropsType) {\r\n  const handleBillInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const character = (e.nativeEvent as InputEvent).data;\r\n\r\n    if (character && /\\d/.test(character)) {\r\n      let newValue = (state * 10).toFixed(2);\r\n      newValue = newValue.slice(0, newValue.length - 1) + character;\r\n\r\n      if (parseFloat(newValue) <= maxValue) setState(parseFloat(newValue));\r\n    }\r\n  };\r\n\r\n  const handleBillBackspace = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Backspace\") {\r\n      if (state > 0) {\r\n        let newValue = state.toString();\r\n\r\n        newValue =\r\n          newValue.slice(0, newValue.length - 3) +\r\n          newValue[newValue.length - 2];\r\n\r\n        setState(parseFloat(newValue) / 100);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      className={styles[\"input\"]}\r\n      onChange={handleBillInput}\r\n      onKeyDown={handleBillBackspace}\r\n      value={state.toFixed(2)}\r\n      aria-label=\"Bill\"\r\n      {...rest}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport type { ButtonPropsType } from \"../types/Types\";\r\n//@ts-ignore\r\nimport styles from \"./TipButton.module.css\";\r\nimport cx from \"classnames\";\r\n\r\nexport default function TipButton({\r\n  text,\r\n  value,\r\n  state,\r\n  setState\r\n}: ButtonPropsType) {\r\n  function onClick(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n    setState({\r\n      value,\r\n      custom: false\r\n    });\r\n  }\r\n\r\n  /*\r\n    The 'tip-active' class will be used when the tip is not custom (input)\r\n    and the value of the tip is the same of the button's value\r\n  */\r\n  const btnClass = cx({\r\n    [styles[\"button\"]]: true,\r\n    [styles[\"button_active\"]]: !state.custom && state.value === value\r\n  });\r\n\r\n  return (\r\n    <button className={btnClass} onClick={onClick}>\r\n      {text}\r\n    </button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { InputTipPropsType } from \"../types/Types\";\r\n//@ts-ignore\r\nimport styles from \"./InputTip.module.css\";\r\n\r\nexport default function InputTip({\r\n  state,\r\n  setState,\r\n  maxValue\r\n}: InputTipPropsType) {\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const character = (e.nativeEvent as InputEvent).data;\r\n\r\n    if (character && /\\d/.test(character)) {\r\n      let currentValue = parseInt(character, 10);\r\n      if (state.custom)\r\n        currentValue = parseInt(state.value.toString() + character, 10);\r\n\r\n      // limit\r\n      if (currentValue <= maxValue)\r\n        setState({ value: currentValue, custom: true });\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === \"Backspace\") {\r\n      if (state.value > 0) {\r\n        const newValue = state.value.toString();\r\n        setState({\r\n          ...state,\r\n          value: parseInt(newValue.slice(0, newValue.length - 1) || \"0\", 10)\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Custom\"\r\n      className={styles[\"input\"]}\r\n      value={state.custom ? state.value + \"%\" : \"\"}\r\n      onChange={handleChange}\r\n      onKeyDown={handleKeyDown}\r\n    />\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport cx from \"classnames\";\r\n\r\nimport \"./styles.css\";\r\nimport Logo from \"./assets/logo.svg\";\r\n\r\nimport InputPeople from \"./components/InputPeople\";\r\nimport InputBill from \"./components/InputBill\";\r\nimport TipButton from \"./components/TipButton\";\r\nimport InputTip from \"./components/InputTip\";\r\n\r\nimport type { TipType } from \"./types/Types\";\r\n\r\nfunction tipAmount(bill: number, tip: number, people: number): number {\r\n  if (people === 0) return 0;\r\n\r\n  const totalTip = (bill * tip) / 100;\r\n  const tipPerPerson = totalTip / people;\r\n\r\n  return tipPerPerson;\r\n}\r\n\r\nfunction totalPerPerson(bill: number, tip: number, people: number): number {\r\n  if (people === 0) return 0;\r\n\r\n  let totalPerPerson = bill + bill * (tip / 100);\r\n  totalPerPerson = totalPerPerson / people;\r\n\r\n  return totalPerPerson;\r\n}\r\n\r\nconst tips = [\r\n  {\r\n    text: \"5%\",\r\n    value: 5\r\n  },\r\n  {\r\n    text: \"10%\",\r\n    value: 10\r\n  },\r\n  {\r\n    text: \"15%\",\r\n    value: 15\r\n  },\r\n  {\r\n    text: \"25%\",\r\n    value: 25\r\n  },\r\n  {\r\n    text: \"50%\",\r\n    value: 50\r\n  }\r\n]\r\n\r\nexport default function App() {\r\n  const [bill, setBill] = useState(0);\r\n  const [people, setPeople] = useState(1);\r\n  const [tip, setTip] = useState<TipType>({ value: 5, custom: false });\r\n\r\n  const handlerSetBill = (value: number) => setBill(value);\r\n  const handlerSetPeople = (value: number) => setPeople(value);\r\n  const handlerSetTip = (value: TipType) => setTip(value);\r\n\r\n  const handleReset = () => {\r\n    setBill(0);\r\n    setPeople(1);\r\n    setTip({ value: 5, custom: false });\r\n  };\r\n\r\n  const classPeopleInputError = cx({\r\n    \"control-people__error\": true,\r\n    \"control-people__error_visible\": people === 0\r\n  });\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header>\r\n        <h1>\r\n          <picture>\r\n            <img src={Logo} alt=\"Logo\" />\r\n          </picture>\r\n        </h1>\r\n      </header>\r\n      <main className=\"main-container\">\r\n        <section className=\"controls\">\r\n          <div className=\"control-bill\">\r\n            <p className=\"control-bill__label\">Bill</p>\r\n            <InputBill\r\n              state={bill}\r\n              setState={handlerSetBill}\r\n              maxValue={1_000_000}\r\n              title=\"Max value: 1.000.000\"\r\n            />\r\n          </div>\r\n          <div className=\"control-tip\">\r\n            <p className=\"control-tip__label\">Select Tip %</p>\r\n            <div className=\"control-tip__buttons\">\r\n              { tips.map(t => <TipButton key={t.value} state={tip} setState={handlerSetTip} {...t} />) }\r\n              <InputTip state={tip} setState={handlerSetTip} maxValue={100} />\r\n            </div>\r\n          </div>\r\n          <div className=\"control-people\">\r\n            <div className=\"control-people__container\">\r\n              <p className=\"control-people__label\">Number of People</p>\r\n              <p className={classPeopleInputError}>Can't be zero</p>\r\n            </div>\r\n            <InputPeople\r\n              state={people}\r\n              setState={handlerSetPeople}\r\n              maxValue={1_000}\r\n              title=\"Max value: 1.000\"\r\n            />\r\n          </div>\r\n        </section>\r\n        <section className=\"result\">\r\n          <div className=\"result__tip-label-container\">\r\n            Tip Amount<span className=\"result__per-person\">/ person</span>\r\n          </div>\r\n          <div className=\"result__tip-result-container\" id=\"amount-person\">\r\n            ${tipAmount(bill, tip.value, people).toFixed(2)}\r\n          </div>\r\n          <div className=\"result__total-label\">\r\n            Total<span className=\"result__per-person\">/ person</span>\r\n          </div>\r\n          <div className=\"result__total-result-container\" id=\"total-person\">\r\n            ${totalPerPerson(bill, tip.value, people).toFixed(2)}\r\n          </div>\r\n          <button className=\"result__button-reset\" onClick={handleReset}>\r\n            RESET\r\n          </button>\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}